package mnm.mods.kappa.gradle

import groovy.xml.MarkupBuilder

import org.gradle.api.tasks.OutputFile
import org.gradle.plugins.ide.eclipse.model.EclipseModel

class GenerateEclipseApt extends AptTask {

    private static final String FACTORYPATH_FILE = ".factorypath"
    private static final String FACTORYPATH = "factorypath"
    private static final String FACTORYPATH_ENTRY = "factorypathentry"

    private static final String PREFS_FILE = ".settings/org.eclipse.jdt.apt.core.prefs"
    private static final String PREFS_CONTENTS = """
eclipse.preferences.version=1
org.eclipse.jdt.apt.aptEnabled=true
org.eclipse.jdt.apt.genSrcDir=.apt_generated
org.eclipse.jdt.apt.reconcileEnabled=true
"""

    private static final String PROCESS_ANNOTATIONS = "org.eclipse.jdt.core.compiler.processAnnotations"

    @OutputFile
    private File outputFile = project.file PREFS_FILE
    @OutputFile
    private File factoryPathFile = project.file FACTORYPATH_FILE

    @Override
    void doTask() {
        enableAnnotations()
        createAptPrefs()
        createFactorypath()
    }

    private enableAnnotations() {
        // modify the jdt properties file to enable processing
        EclipseModel eclipse = project.extensions["eclipse"]
        eclipse.jdt.file.transformer.addAction { properties[PROCESS_ANNOTATIONS] = "enabled" }
    }

    private createAptPrefs() {
        // create the apt properties file.
        outputFile = project.file PREFS_FILE
        def defaults = new Properties()
        defaults.load(new StringReader(PREFS_CONTENTS))
        def props = new Properties(defaults)
        if (outputFile.exists()) {
            props.load new FileReader(outputFile)
        } else {
            props.load new StringReader(PREFS_CONTENTS)
            outputFile.createNewFile()
        }
        props["org.eclipse.jdt.apt.aptEnabled"] = "true"
        props.store new FileWriter(outputFile), "Generated by Kappa-gradle"

    }

    private createFactorypath() {
        // Creates the .factorypath xml file used to define annotation
        // processors.
        final String entry = FACTORYPATH_ENTRY
        def xml = new MarkupBuilder(new FileWriter(factoryPathFile))
        // <factorypath>
        xml."$FACTORYPATH" {
            factory.each { File f ->
                // <factorypathentry>
                "$entry"(
                        kind:           'EXTJAR',
                        id:             f.absolutePath,
                        enabled:        'true',
                        runInBatchMode: 'false')
                // </factorypathentry>
            }
        }
        // </factorypath>
    }

}
