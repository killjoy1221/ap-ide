package mnm.mods.kappa.gradle

import groovy.xml.MarkupBuilder

import org.gradle.api.tasks.OutputFile
import org.gradle.plugins.ide.eclipse.model.EclipseModel

class GenerateEclipseApt extends AptTask {

    private static final String PREFS_FILE = ".settings/org.eclipse.jdt.apt.core.prefs"
    private static final Map<String, String> PREFS_CONTENTS =
    [
                 'eclipse.preferences.version': '1',
              'org.eclipse.jdt.apt.aptEnabled': 'true',
               'org.eclipse.jdt.apt.genSrcDir': '.apt_generated',
        'org.eclipse.jdt.apt.reconcileEnabled': 'true'
    ].asImmutable()

    private static final String PROCESS_ANNOTATIONS = "org.eclipse.jdt.core.compiler.processAnnotations"

    @OutputFile
    private File outputFile = project.file PREFS_FILE
    @OutputFile
    private File factoryPathFile = project.file '.factorypath'

    @Override
    void doTask() {
        enableAnnotations()
        createAptPrefs()
        createFactorypath()
    }

    private enableAnnotations() {
        // modify the jdt properties file to enable processing
        EclipseModel eclipse = project.extensions.getByType(EclipseModel)
        eclipse.jdt.file.transformer.addAction { properties[PROCESS_ANNOTATIONS] = "enabled" }
    }

    private createAptPrefs() {
        // create the apt properties file.
        outputFile = project.file PREFS_FILE
        def defaults = new Properties()
        defaults += PREFS_CONTENTS
        def props = new Properties(defaults)
        if (outputFile.exists()) {
            props.load new FileReader(outputFile)
        } else {
            props += PREFS_CONTENTS
            outputFile.createNewFile()
        }
        props = props.findAll { !it.key.startsWith('org.eclipse.jdt.apt.processorOptions/') }
        props["org.eclipse.jdt.apt.aptEnabled"] = "true"
        options.each { key, value ->
            props["org.eclipse.jdt.apt.processorOptions/$key"] = value.toString()
        }
        props.store new FileWriter(outputFile), "Generated by Kappa-gradle"

    }

    private createFactorypath() {
        // Creates the .factorypath xml file used to define annotation
        // processors.
        def xml = new MarkupBuilder(new FileWriter(factoryPathFile))
        // <factorypath>
        xml.factorypath {
            factory.each { File f ->
                // <factorypathentry>
                factorypathentry(
                        kind:           'EXTJAR',
                        id:             f.absolutePath,
                        enabled:        'true',
                        runInBatchMode: 'false')
                // </factorypathentry>
            }
        }
        // </factorypath>
    }

}
